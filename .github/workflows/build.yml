name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  # Build number based on GitHub run number
  VERSION_CODE: ${{ github.run_number }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      version-name: ${{ steps.version.outputs.version-name }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version calculation
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Calculate version name
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION_NAME=${GITHUB_REF#refs/tags/}
        else
          COMMIT_COUNT=$(git rev-list --count HEAD)
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION_NAME="dev-${COMMIT_COUNT}-${SHORT_SHA}"
        fi
        echo "version-name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "Version name: $VERSION_NAME"
        
    - name: Update version in build.gradle
      run: |
        sed -i "s/versionName \".*\"/versionName \"${{ steps.version.outputs.version-name }}\"/" app/build.gradle
        sed -i "s/versionCode [0-9]*/versionCode $VERSION_CODE/" app/build.gradle
        
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Build release APK (unsigned)
      if: "!startsWith(github.ref, 'refs/tags/')"
      run: ./gradlew assembleRelease
      
    # Sign release APK only for tagged releases
    - name: Decode Keystore
      if: startsWith(github.ref, 'refs/tags/')
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        if [ -n "$KEYSTORE_BASE64" ]; then
          echo $KEYSTORE_BASE64 | base64 -d > keystore.jks
        fi
        
    - name: Build signed release APK
      if: startsWith(github.ref, 'refs/tags/') && env.KEYSTORE_BASE64 != ''
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file=../keystore.jks \
          -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          
    - name: Build unsigned release APK (fallback)
      if: startsWith(github.ref, 'refs/tags/') && env.KEYSTORE_BASE64 == ''
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: ./gradlew assembleRelease
      
    - name: Rename APK files
      run: |
        cd app/build/outputs/apk
        # Rename debug APK
        if [ -f debug/app-debug.apk ]; then
          mv debug/app-debug.apk debug/reverse-pixelify-${{ steps.version.outputs.version-name }}-debug.apk
        fi
        # Rename release APK
        if [ -f release/app-release.apk ]; then
          mv release/app-release.apk release/reverse-pixelify-${{ steps.version.outputs.version-name }}-release.apk
        elif [ -f release/app-release-unsigned.apk ]; then
          mv release/app-release-unsigned.apk release/reverse-pixelify-${{ steps.version.outputs.version-name }}-release-unsigned.apk
        fi
        
    - name: Upload debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk-${{ steps.version.outputs.version-name }}
        path: app/build/outputs/apk/debug/*.apk
        
    - name: Upload release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-${{ steps.version.outputs.version-name }}
        path: app/build/outputs/apk/release/*.apk
        
    - name: List APK info
      run: |
        echo "=== APK Files Created ==="
        find app/build/outputs/apk -name "*.apk" -exec ls -lh {} \;
        echo ""
        echo "=== APK Details ==="
        find app/build/outputs/apk -name "*.apk" -exec aapt dump badging {} \; | grep -E "(package|versionCode|versionName)" || true

  # Create GitHub Release for tags
  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download release APK
      uses: actions/download-artifact@v4
      with:
        name: release-apk-${{ needs.build.outputs.version-name }}
        path: ./apks
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Reverse Pixelify ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        body: |
          ## What's Changed
          - Auto-generated release from tag ${{ github.ref_name }}
          
          ## Installation
          1. Download the APK file below
          2. Install using a file manager or ADB
          3. Activate in LSPosed/Xposed framework
          4. Reboot your device
          
          ## Supported ROMs
          - PixelExperience
          - EvolutionX  
          - CrDroidAndroid
          
          **Note**: This module requires Xposed/LSPosed framework to function.
          
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./apks/reverse-pixelify-${{ needs.build.outputs.version-name }}-release.apk
        asset_name: reverse-pixelify-${{ github.ref_name }}.apk
        asset_content_type: application/vnd.android.package-archive

  # Optional: Notify on build completion
  notify:
    if: always()
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
    - name: Build Status
      run: |
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ Build completed successfully!"
          echo "Version: ${{ needs.build.outputs.version-name }}"
        else
          echo "❌ Build failed!"
          exit 1
        fi